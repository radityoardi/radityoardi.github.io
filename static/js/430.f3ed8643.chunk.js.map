{"version":3,"file":"static/js/430.f3ed8643.chunk.js","mappings":"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","sources":["../node_modules/@fluentui/react/lib/components/Button/src/components/Button/DefaultButton/DefaultButton.styles.ts","../node_modules/@fluentui/react/lib/components/src/components/Button/ButtonThemes.ts","../node_modules/@fluentui/react/lib/components/Button/src/components/Button/DefaultButton/DefaultButton.tsx","../node_modules/@fluentui/react/lib/components/Button/src/components/Button/PrimaryButton/PrimaryButton.tsx","../node_modules/@fluentui/react/lib/components/src/components/Label/Label.base.tsx","../node_modules/@fluentui/react/lib/components/src/components/Label/Label.tsx","../node_modules/@fluentui/react/lib/components/src/components/Label/Label.styles.ts","../node_modules/@fluentui/utilities/src/DelayedRender.tsx","../node_modules/@fluentui/react/lib/components/src/components/TextField/TextField.base.tsx","../node_modules/@fluentui/utilities/src/ie11Detector.ts","../node_modules/@fluentui/utilities/src/controlled.ts","../node_modules/@fluentui/react/lib/components/src/components/TextField/TextField.styles.tsx","../node_modules/@fluentui/react/lib/components/src/components/TextField/TextField.ts","../node_modules/@fluentui/react/lib/components/src/components/Text/Text.ts","../node_modules/@fluentui/react/lib/components/src/components/Text/Text.view.tsx","../node_modules/@fluentui/react/lib/components/src/components/Text/Text.styles.ts","../node_modules/@fluentui/react/lib/components/src/components/Toggle/Toggle.base.tsx","../node_modules/@fluentui/react-hooks/src/useControllableValue.ts","../node_modules/@fluentui/react/lib/components/src/components/Toggle/Toggle.tsx","../node_modules/@fluentui/react/lib/components/src/components/Toggle/Toggle.styles.ts"],"sourcesContent":["import { concatStyleSets, FontWeights } from '../../../Styling';\nimport { memoizeFunction } from '../../../Utilities';\nimport { getStyles as getBaseButtonStyles } from '../BaseButton.styles';\nimport { getStyles as getSplitButtonStyles } from '../SplitButton/SplitButton.styles';\n\nimport { primaryStyles, standardStyles } from '../ButtonThemes';\nimport type { IButtonStyles } from '../Button.types';\nimport type { ITheme } from '../../../Styling';\n\nconst DEFAULT_BUTTON_HEIGHT = '32px';\nconst DEFAULT_BUTTON_MIN_WIDTH = '80px';\n\nexport const getStyles = memoizeFunction(\n  (theme: ITheme, customStyles?: IButtonStyles, primary?: boolean): IButtonStyles => {\n    const baseButtonStyles: IButtonStyles = getBaseButtonStyles(theme);\n    const splitButtonStyles: IButtonStyles = getSplitButtonStyles(theme);\n    const defaultButtonStyles: IButtonStyles = {\n      root: {\n        minWidth: DEFAULT_BUTTON_MIN_WIDTH,\n        height: DEFAULT_BUTTON_HEIGHT,\n      },\n      label: {\n        fontWeight: FontWeights.semibold,\n      },\n    };\n\n    return concatStyleSets(\n      baseButtonStyles,\n      defaultButtonStyles,\n      primary ? primaryStyles(theme) : standardStyles(theme),\n      splitButtonStyles,\n      customStyles,\n    )!;\n  },\n);\n","import { HighContrastSelector, getHighContrastNoAdjustStyle } from '../../Styling';\nimport { IsFocusVisibleClassName } from '../../Utilities';\nimport type { IButtonStyles } from './Button.types';\nimport type { ITheme, IRawStyle } from '../../Styling';\n\nconst splitButtonDividerBaseStyles = (): IRawStyle => {\n  return {\n    position: 'absolute',\n    width: 1,\n    right: 31,\n    top: 8,\n    bottom: 8,\n  };\n};\n\nexport function standardStyles(theme: ITheme): IButtonStyles {\n  const { semanticColors: s, palette: p } = theme;\n\n  const buttonBackground = s.buttonBackground;\n  const buttonBackgroundPressed = s.buttonBackgroundPressed;\n  const buttonBackgroundHovered = s.buttonBackgroundHovered;\n  const buttonBackgroundDisabled = s.buttonBackgroundDisabled;\n\n  const buttonText = s.buttonText;\n  const buttonTextHovered = s.buttonTextHovered;\n  const buttonTextDisabled = s.buttonTextDisabled;\n  const buttonTextChecked = s.buttonTextChecked;\n  const buttonTextCheckedHovered = s.buttonTextCheckedHovered;\n\n  return {\n    root: {\n      backgroundColor: buttonBackground,\n      color: buttonText,\n    },\n\n    rootHovered: {\n      backgroundColor: buttonBackgroundHovered,\n      color: buttonTextHovered,\n      selectors: {\n        [HighContrastSelector]: {\n          borderColor: 'Highlight',\n          color: 'Highlight',\n        },\n      },\n    },\n\n    rootPressed: {\n      backgroundColor: buttonBackgroundPressed,\n      color: buttonTextChecked,\n    },\n\n    rootExpanded: {\n      backgroundColor: buttonBackgroundPressed,\n      color: buttonTextChecked,\n    },\n\n    rootChecked: {\n      backgroundColor: buttonBackgroundPressed,\n      color: buttonTextChecked,\n    },\n\n    rootCheckedHovered: {\n      backgroundColor: buttonBackgroundPressed,\n      color: buttonTextCheckedHovered,\n    },\n\n    rootDisabled: {\n      color: buttonTextDisabled,\n      backgroundColor: buttonBackgroundDisabled,\n      selectors: {\n        [HighContrastSelector]: {\n          color: 'GrayText',\n          borderColor: 'GrayText',\n          backgroundColor: 'Window',\n        },\n      },\n    },\n\n    // Split button styles\n    splitButtonContainer: {\n      selectors: {\n        [HighContrastSelector]: {\n          border: 'none',\n        },\n      },\n    },\n\n    splitButtonMenuButton: {\n      color: p.white,\n      backgroundColor: 'transparent',\n      selectors: {\n        ':hover': {\n          backgroundColor: p.neutralLight,\n          selectors: {\n            [HighContrastSelector]: {\n              color: 'Highlight',\n            },\n          },\n        },\n      },\n    },\n\n    splitButtonMenuButtonDisabled: {\n      backgroundColor: s.buttonBackgroundDisabled,\n      selectors: {\n        ':hover': {\n          backgroundColor: s.buttonBackgroundDisabled,\n        },\n      },\n    },\n\n    splitButtonDivider: {\n      ...splitButtonDividerBaseStyles(),\n      backgroundColor: p.neutralTertiaryAlt,\n      selectors: {\n        [HighContrastSelector]: {\n          backgroundColor: 'WindowText',\n        },\n      },\n    },\n\n    splitButtonDividerDisabled: {\n      backgroundColor: theme.palette.neutralTertiaryAlt,\n    },\n\n    splitButtonMenuButtonChecked: {\n      backgroundColor: p.neutralQuaternaryAlt,\n      selectors: {\n        ':hover': {\n          backgroundColor: p.neutralQuaternaryAlt,\n        },\n      },\n    },\n\n    splitButtonMenuButtonExpanded: {\n      backgroundColor: p.neutralQuaternaryAlt,\n      selectors: {\n        ':hover': {\n          backgroundColor: p.neutralQuaternaryAlt,\n        },\n      },\n    },\n\n    splitButtonMenuIcon: {\n      color: s.buttonText,\n    },\n\n    splitButtonMenuIconDisabled: {\n      color: s.buttonTextDisabled,\n    },\n  };\n}\n\nexport function primaryStyles(theme: ITheme): IButtonStyles {\n  const { palette: p, semanticColors: s } = theme;\n\n  return {\n    root: {\n      backgroundColor: s.primaryButtonBackground,\n      border: `1px solid ${s.primaryButtonBackground}`,\n      color: s.primaryButtonText,\n      selectors: {\n        [HighContrastSelector]: {\n          color: 'Window',\n          backgroundColor: 'WindowText',\n          borderColor: 'WindowText',\n          ...getHighContrastNoAdjustStyle(),\n        },\n        [`.${IsFocusVisibleClassName} &:focus`]: {\n          selectors: {\n            ':after': {\n              border: `none`,\n              outlineColor: p.white,\n            },\n          },\n        },\n      },\n    },\n\n    rootHovered: {\n      backgroundColor: s.primaryButtonBackgroundHovered,\n      border: `1px solid ${s.primaryButtonBackgroundHovered}`,\n      color: s.primaryButtonTextHovered,\n      selectors: {\n        [HighContrastSelector]: {\n          color: 'Window',\n          backgroundColor: 'Highlight',\n          borderColor: 'Highlight',\n        },\n      },\n    },\n\n    rootPressed: {\n      backgroundColor: s.primaryButtonBackgroundPressed,\n      border: `1px solid ${s.primaryButtonBackgroundPressed}`,\n      color: s.primaryButtonTextPressed,\n      selectors: {\n        [HighContrastSelector]: {\n          color: 'Window',\n          backgroundColor: 'WindowText',\n          borderColor: 'WindowText',\n          ...getHighContrastNoAdjustStyle(),\n        },\n      },\n    },\n\n    rootExpanded: {\n      backgroundColor: s.primaryButtonBackgroundPressed,\n      color: s.primaryButtonTextPressed,\n    },\n\n    rootChecked: {\n      backgroundColor: s.primaryButtonBackgroundPressed,\n      color: s.primaryButtonTextPressed,\n    },\n\n    rootCheckedHovered: {\n      backgroundColor: s.primaryButtonBackgroundPressed,\n      color: s.primaryButtonTextPressed,\n    },\n\n    rootDisabled: {\n      color: s.primaryButtonTextDisabled,\n      backgroundColor: s.primaryButtonBackgroundDisabled,\n      selectors: {\n        [HighContrastSelector]: {\n          color: 'GrayText',\n          borderColor: 'GrayText',\n          backgroundColor: 'Window',\n        },\n      },\n    },\n\n    // Split button styles\n    splitButtonContainer: {\n      selectors: {\n        [HighContrastSelector]: {\n          border: 'none',\n        },\n      },\n    },\n\n    splitButtonDivider: {\n      ...splitButtonDividerBaseStyles(),\n      backgroundColor: p.white,\n      selectors: {\n        [HighContrastSelector]: {\n          backgroundColor: 'Window',\n        },\n      },\n    },\n\n    splitButtonMenuButton: {\n      backgroundColor: s.primaryButtonBackground,\n      color: s.primaryButtonText,\n      selectors: {\n        [HighContrastSelector]: {\n          backgroundColor: 'WindowText',\n        },\n        ':hover': {\n          backgroundColor: s.primaryButtonBackgroundHovered,\n          selectors: {\n            [HighContrastSelector]: {\n              color: 'Highlight',\n            },\n          },\n        },\n      },\n    },\n\n    splitButtonMenuButtonDisabled: {\n      backgroundColor: s.primaryButtonBackgroundDisabled,\n      selectors: {\n        ':hover': {\n          backgroundColor: s.primaryButtonBackgroundDisabled,\n        },\n      },\n    },\n\n    splitButtonMenuButtonChecked: {\n      backgroundColor: s.primaryButtonBackgroundPressed,\n      selectors: {\n        ':hover': {\n          backgroundColor: s.primaryButtonBackgroundPressed,\n        },\n      },\n    },\n\n    splitButtonMenuButtonExpanded: {\n      backgroundColor: s.primaryButtonBackgroundPressed,\n      selectors: {\n        ':hover': {\n          backgroundColor: s.primaryButtonBackgroundPressed,\n        },\n      },\n    },\n\n    splitButtonMenuIcon: {\n      color: s.primaryButtonText,\n    },\n\n    splitButtonMenuIconDisabled: {\n      color: p.neutralTertiary,\n\n      selectors: {\n        [HighContrastSelector]: {\n          color: 'GrayText',\n        },\n      },\n    },\n  };\n}\n","import * as React from 'react';\nimport { BaseButton } from '../BaseButton';\nimport { customizable, nullRender } from '../../../Utilities';\nimport { getStyles } from './DefaultButton.styles';\nimport type { IButtonProps } from '../Button.types';\n\n/**\n * {@docCategory Button}\n */\n@customizable('DefaultButton', ['theme', 'styles'], true)\nexport class DefaultButton extends React.Component<IButtonProps, {}> {\n  public render(): JSX.Element {\n    const { primary = false, styles, theme } = this.props;\n\n    return (\n      <BaseButton\n        {...this.props}\n        variantClassName={primary ? 'ms-Button--primary' : 'ms-Button--default'}\n        styles={getStyles(theme!, styles, primary)}\n        onRenderDescription={nullRender}\n      />\n    );\n  }\n}\n","import * as React from 'react';\nimport { customizable, nullRender } from '../../../Utilities';\nimport { DefaultButton } from '../DefaultButton/DefaultButton';\nimport type { IButtonProps } from '../Button.types';\n\n/**\n * {@docCategory Button}\n */\n@customizable('PrimaryButton', ['theme', 'styles'], true)\nexport class PrimaryButton extends React.Component<IButtonProps, {}> {\n  public render(): JSX.Element {\n    return <DefaultButton {...this.props} primary={true} onRenderDescription={nullRender} />;\n  }\n}\n","import * as React from 'react';\nimport { divProperties, getNativeProps } from '../../Utilities';\nimport { classNamesFunction } from '../../Utilities';\nimport type { ILabelProps, ILabelStyleProps, ILabelStyles } from './Label.types';\n\nconst getClassNames = classNamesFunction<ILabelStyleProps, ILabelStyles>({\n  // Label is used a lot by other components.\n  // It's likely to see expected cases which pass different className to the Label.\n  // Therefore setting a larger cache size.\n  cacheSize: 100,\n});\n\nexport class LabelBase extends React.Component<ILabelProps, {}> {\n  public render(): JSX.Element {\n    const { as: RootType = 'label', children, className, disabled, styles, required, theme } = this.props;\n    const classNames = getClassNames(styles, {\n      className,\n      disabled,\n      required,\n      theme: theme!,\n    });\n    return (\n      <RootType {...getNativeProps(this.props, divProperties)} className={classNames.root}>\n        {children}\n      </RootType>\n    );\n  }\n}\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { LabelBase } from './Label.base';\nimport { getStyles } from './Label.styles';\nimport type { ILabelProps, ILabelStyleProps, ILabelStyles } from './Label.types';\n\nexport const Label: React.FunctionComponent<ILabelProps> = styled<ILabelProps, ILabelStyleProps, ILabelStyles>(\n  LabelBase,\n  getStyles,\n  undefined,\n  {\n    scope: 'Label',\n  },\n);\n","import { HighContrastSelector, FontWeights, getHighContrastNoAdjustStyle } from '../../Styling';\nimport type { ILabelStyleProps, ILabelStyles } from './Label.types';\n\nexport const getStyles = (props: ILabelStyleProps): ILabelStyles => {\n  const { theme, className, disabled, required } = props;\n  const { semanticColors } = theme;\n\n  // Tokens\n  const labelFontWeight = FontWeights.semibold;\n  const labelColor = semanticColors.bodyText;\n  const labelDisabledColor = semanticColors.disabledBodyText;\n  const labelRequiredStarColor = semanticColors.errorText;\n\n  return {\n    root: [\n      'ms-Label',\n      theme.fonts.medium,\n      {\n        fontWeight: labelFontWeight,\n        color: labelColor,\n        boxSizing: 'border-box',\n        boxShadow: 'none',\n        margin: 0,\n        display: 'block',\n        padding: '5px 0',\n        wordWrap: 'break-word',\n        overflowWrap: 'break-word',\n      },\n      disabled && {\n        color: labelDisabledColor,\n        selectors: {\n          [HighContrastSelector]: {\n            color: 'GrayText',\n            ...getHighContrastNoAdjustStyle(),\n          },\n        },\n      },\n      required && {\n        selectors: {\n          '::after': {\n            content: `' *'`,\n            color: labelRequiredStarColor,\n            paddingRight: 12,\n          },\n        },\n      },\n      className,\n    ],\n  };\n};\n","import * as React from 'react';\n\n/**\n * DelayedRender component props.\n *\n * @public\n */\n// eslint-disable-next-line deprecation/deprecation\nexport interface IDelayedRenderProps extends React.Props<{}> {\n  /**\n   * Number of milliseconds to delay rendering children.\n   */\n  delay?: number;\n}\n\n/**\n * DelayedRender component state.\n *\n * @internal\n */\nexport interface IDelayedRenderState {\n  /**\n   * Whether the component is rendered or not.\n   */\n  isRendered: boolean;\n}\n\n/**\n * Utility component for delaying the render of a child component after a given delay. This component\n * requires a single child component; don't pass in many components. Wrap multiple components in a DIV\n * if necessary.\n *\n * @public\n * {@docCategory DelayedRender}\n */\nexport class DelayedRender extends React.Component<IDelayedRenderProps, IDelayedRenderState> {\n  public static defaultProps = {\n    delay: 0,\n  };\n\n  private _timeoutId: number | undefined;\n\n  constructor(props: IDelayedRenderProps) {\n    super(props);\n    this.state = {\n      isRendered: false,\n    };\n  }\n\n  public componentDidMount(): void {\n    let { delay } = this.props;\n    this._timeoutId = window.setTimeout(() => {\n      this.setState({\n        isRendered: true,\n      });\n    }, delay);\n  }\n\n  public componentWillUnmount(): void {\n    if (this._timeoutId) {\n      clearTimeout(this._timeoutId);\n    }\n  }\n\n  public render(): React.ReactElement<{}> | null {\n    return this.state.isRendered ? (React.Children.only(this.props.children) as React.ReactElement<{}>) : null;\n  }\n}\n","import * as React from 'react';\nimport { Label } from '../../Label';\nimport { Icon } from '../../Icon';\nimport {\n  Async,\n  classNamesFunction,\n  DelayedRender,\n  getId,\n  getNativeProps,\n  getWindow,\n  initializeComponentRef,\n  inputProperties,\n  isControlled,\n  isIE11,\n  textAreaProperties,\n  warn,\n  warnControlledUsage,\n  warnMutuallyExclusive,\n} from '../../Utilities';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport type { ILabelStyleProps, ILabelStyles } from '../../Label';\nimport type { IStyleFunctionOrObject } from '../../Utilities';\nimport type { ITextField, ITextFieldProps, ITextFieldStyleProps, ITextFieldStyles } from './TextField.types';\n\nconst getClassNames = classNamesFunction<ITextFieldStyleProps, ITextFieldStyles>();\n\n/** @internal */\nexport interface ITextFieldState {\n  /** The currently displayed value if uncontrolled. */\n  uncontrolledValue: string | undefined;\n\n  /** Is true when the control has focus. */\n  isFocused?: boolean;\n\n  /**\n   * Dynamic error message returned by `onGetErrorMessage`.\n   * Use `this._errorMessage` to get the actual current error message.\n   */\n  errorMessage: string | JSX.Element;\n\n  /**\n   * Whether this field has `type='password'` and `canRevealPassword=true`, and the password is\n   * currently being revealed.\n   */\n  isRevealingPassword?: boolean;\n}\n\n/** @internal */\nexport interface ITextFieldSnapshot {\n  /**\n   * If set, the text field is changing between single- and multi-line, so we'll need to reset\n   * selection/cursor after the change completes.\n   */\n  selection?: [number | null, number | null];\n}\n\nconst DEFAULT_STATE_VALUE = '';\nconst COMPONENT_NAME = 'TextField';\n\nconst REVEAL_ICON_NAME = 'RedEye';\nconst HIDE_ICON_NAME = 'Hide';\n\nexport class TextFieldBase\n  extends React.Component<ITextFieldProps, ITextFieldState, ITextFieldSnapshot>\n  implements ITextField {\n  public static defaultProps: ITextFieldProps = {\n    resizable: true,\n    deferredValidationTime: 200,\n    validateOnLoad: true,\n  };\n\n  /** Fallback ID if none is provided in props. Access proper value via `this._id`. */\n  private _fallbackId: string;\n  private _descriptionId: string;\n  private _labelId: string;\n  private _prefixId: string;\n  private _suffixId: string;\n  private _delayedValidate: (value: string | undefined) => void;\n  private _lastValidation: number;\n  private _latestValidateValue: string | undefined;\n  private _hasWarnedNullValue: boolean | undefined;\n  private _textElement = React.createRef<HTMLTextAreaElement | HTMLInputElement>();\n  private _classNames: IProcessedStyleSet<ITextFieldStyles>;\n  private _async: Async;\n  /** Most recent value from a change or input event, to help avoid processing events twice */\n  private _lastChangeValue: string | undefined;\n\n  public constructor(props: ITextFieldProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnMutuallyExclusive(COMPONENT_NAME, props, {\n        errorMessage: 'onGetErrorMessage',\n      });\n    }\n\n    this._fallbackId = getId(COMPONENT_NAME);\n    this._descriptionId = getId(COMPONENT_NAME + 'Description');\n    this._labelId = getId(COMPONENT_NAME + 'Label');\n    this._prefixId = getId(COMPONENT_NAME + 'Prefix');\n    this._suffixId = getId(COMPONENT_NAME + 'Suffix');\n\n    this._warnControlledUsage();\n\n    let { defaultValue = DEFAULT_STATE_VALUE } = props;\n    if (typeof defaultValue === 'number') {\n      // This isn't allowed per the props, but happens anyway.\n      defaultValue = String(defaultValue);\n    }\n    this.state = {\n      uncontrolledValue: this._isControlled ? undefined : defaultValue,\n      isFocused: false,\n      errorMessage: '',\n    };\n\n    this._delayedValidate = this._async.debounce(this._validate, this.props.deferredValidationTime);\n    this._lastValidation = 0;\n  }\n\n  /**\n   * Gets the current value of the text field.\n   */\n  public get value(): string | undefined {\n    return _getValue(this.props, this.state);\n  }\n\n  public componentDidMount(): void {\n    this._adjustInputHeight();\n\n    if (this.props.validateOnLoad) {\n      this._validate(this.value);\n    }\n  }\n\n  public componentWillUnmount() {\n    this._async.dispose();\n  }\n\n  public getSnapshotBeforeUpdate(prevProps: ITextFieldProps, prevState: ITextFieldState): ITextFieldSnapshot | null {\n    return {\n      selection: [this.selectionStart, this.selectionEnd],\n    };\n  }\n\n  public componentDidUpdate(\n    prevProps: ITextFieldProps,\n    prevState: ITextFieldState,\n    snapshot: ITextFieldSnapshot,\n  ): void {\n    const props = this.props;\n    const { selection = [null, null] } = snapshot || {};\n    const [start, end] = selection;\n\n    if (!!prevProps.multiline !== !!props.multiline && prevState.isFocused) {\n      // The text field has just changed between single- and multi-line, so we need to reset focus\n      // and selection/cursor.\n      this.focus();\n      if (start !== null && end !== null && start >= 0 && end >= 0) {\n        this.setSelectionRange(start, end);\n      }\n    }\n\n    if (prevProps.value !== props.value) {\n      // Only if the value in props changed, reset the record of the last value seen by a\n      // change/input event (don't do this if the value in state changed, since at least in tests\n      // the state update may happen before the second event in a series)\n      this._lastChangeValue = undefined;\n    }\n\n    const prevValue = _getValue(prevProps, prevState);\n    const value = this.value;\n    if (prevValue !== value) {\n      // Handle controlled/uncontrolled warnings and status\n      this._warnControlledUsage(prevProps);\n\n      // Clear error message if needed\n      // TODO: is there any way to do this without an extra render?\n      if (this.state.errorMessage && !props.errorMessage) {\n        this.setState({ errorMessage: '' });\n      }\n\n      // Adjust height if needed based on new value\n      this._adjustInputHeight();\n\n      // TODO: #5875 added logic to trigger validation in componentWillReceiveProps and other places.\n      // This seems a bit odd and hard to integrate with the new approach.\n      // (Starting to think we should just put the validation logic in a separate wrapper component...?)\n      if (_shouldValidateAllChanges(props)) {\n        this._delayedValidate(value);\n      }\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      borderless,\n      className,\n      disabled,\n      invalid,\n      iconProps,\n      inputClassName,\n      label,\n      multiline,\n      required,\n      underlined,\n      prefix,\n      resizable,\n      suffix,\n      theme,\n      styles,\n      autoAdjustHeight,\n      canRevealPassword,\n      revealPasswordAriaLabel,\n      type,\n      onRenderPrefix = this._onRenderPrefix,\n      onRenderSuffix = this._onRenderSuffix,\n      onRenderLabel = this._onRenderLabel,\n      onRenderDescription = this._onRenderDescription,\n    } = this.props;\n    const { isFocused, isRevealingPassword } = this.state;\n    const errorMessage = this._errorMessage;\n    const isInvalid = typeof invalid === 'boolean' ? invalid : !!errorMessage;\n\n    const hasRevealButton = !!canRevealPassword && type === 'password' && _browserNeedsRevealButton();\n\n    const classNames = (this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      disabled,\n      focused: isFocused,\n      required,\n      multiline,\n      hasLabel: !!label,\n      hasErrorMessage: isInvalid,\n      borderless,\n      resizable,\n      hasIcon: !!iconProps,\n      underlined,\n      inputClassName,\n      autoAdjustHeight,\n      hasRevealButton,\n    }));\n\n    return (\n      // eslint-disable-next-line deprecation/deprecation\n      <div ref={this.props.elementRef} className={classNames.root}>\n        <div className={classNames.wrapper}>\n          {onRenderLabel(this.props, this._onRenderLabel)}\n          <div className={classNames.fieldGroup}>\n            {(prefix !== undefined || this.props.onRenderPrefix) && (\n              <div className={classNames.prefix} id={this._prefixId}>\n                {onRenderPrefix(this.props, this._onRenderPrefix)}\n              </div>\n            )}\n            {multiline ? this._renderTextArea() : this._renderInput()}\n            {iconProps && <Icon className={classNames.icon} {...iconProps} />}\n            {hasRevealButton && (\n              // Explicitly set type=\"button\" since the default button type within a form is \"submit\"\n              <button\n                aria-label={revealPasswordAriaLabel}\n                className={classNames.revealButton}\n                onClick={this._onRevealButtonClick}\n                aria-pressed={!!isRevealingPassword}\n                type=\"button\"\n              >\n                <span className={classNames.revealSpan}>\n                  <Icon\n                    className={classNames.revealIcon}\n                    iconName={isRevealingPassword ? HIDE_ICON_NAME : REVEAL_ICON_NAME}\n                  />\n                </span>\n              </button>\n            )}\n            {(suffix !== undefined || this.props.onRenderSuffix) && (\n              <div className={classNames.suffix} id={this._suffixId}>\n                {onRenderSuffix(this.props, this._onRenderSuffix)}\n              </div>\n            )}\n          </div>\n        </div>\n        {this._isDescriptionAvailable && (\n          <span id={this._descriptionId}>\n            {onRenderDescription(this.props, this._onRenderDescription)}\n            {errorMessage && (\n              <div role=\"alert\">\n                <DelayedRender>{this._renderErrorMessage()}</DelayedRender>\n              </div>\n            )}\n          </span>\n        )}\n      </div>\n    );\n  }\n\n  /**\n   * Sets focus on the text field\n   */\n  public focus() {\n    if (this._textElement.current) {\n      this._textElement.current.focus();\n    }\n  }\n\n  /**\n   * Blurs the text field.\n   */\n  public blur() {\n    if (this._textElement.current) {\n      this._textElement.current.blur();\n    }\n  }\n\n  /**\n   * Selects the text field\n   */\n  public select() {\n    if (this._textElement.current) {\n      this._textElement.current.select();\n    }\n  }\n\n  /**\n   * Sets the selection start of the text field to a specified value\n   */\n  public setSelectionStart(value: number): void {\n    if (this._textElement.current) {\n      this._textElement.current.selectionStart = value;\n    }\n  }\n\n  /**\n   * Sets the selection end of the text field to a specified value\n   */\n  public setSelectionEnd(value: number): void {\n    if (this._textElement.current) {\n      this._textElement.current.selectionEnd = value;\n    }\n  }\n\n  /**\n   * Gets the selection start of the text field\n   */\n  public get selectionStart(): number | null {\n    return this._textElement.current ? this._textElement.current.selectionStart : -1;\n  }\n\n  /**\n   * Gets the selection end of the text field\n   */\n  public get selectionEnd(): number | null {\n    return this._textElement.current ? this._textElement.current.selectionEnd : -1;\n  }\n\n  /**\n   * Sets the start and end positions of a selection in a text field.\n   * @param start - Index of the start of the selection.\n   * @param end - Index of the end of the selection.\n   */\n  public setSelectionRange(start: number, end: number): void {\n    if (this._textElement.current) {\n      (this._textElement.current as HTMLInputElement).setSelectionRange(start, end);\n    }\n  }\n\n  private _warnControlledUsage(prevProps?: ITextFieldProps): void {\n    // Show warnings if props are being used in an invalid way\n    warnControlledUsage({\n      componentId: this._id,\n      componentName: COMPONENT_NAME,\n      props: this.props,\n      oldProps: prevProps,\n      valueProp: 'value',\n      defaultValueProp: 'defaultValue',\n      onChangeProp: 'onChange',\n      readOnlyProp: 'readOnly',\n    });\n\n    if (this.props.value === null && !this._hasWarnedNullValue) {\n      this._hasWarnedNullValue = true;\n      warn(\n        `Warning: 'value' prop on '${COMPONENT_NAME}' should not be null. Consider using an ` +\n          'empty string to clear the component or undefined to indicate an uncontrolled component.',\n      );\n    }\n  }\n\n  /** Returns `props.id` if available, or a fallback if not. */\n  private get _id(): string {\n    return this.props.id || this._fallbackId;\n  }\n\n  private get _isControlled(): boolean {\n    return isControlled(this.props, 'value');\n  }\n\n  private _onFocus = (ev: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    if (this.props.onFocus) {\n      this.props.onFocus(ev);\n    }\n\n    this.setState({ isFocused: true }, () => {\n      if (this.props.validateOnFocusIn) {\n        this._validate(this.value);\n      }\n    });\n  };\n\n  private _onBlur = (ev: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    if (this.props.onBlur) {\n      this.props.onBlur(ev);\n    }\n\n    this.setState({ isFocused: false }, () => {\n      if (this.props.validateOnFocusOut) {\n        this._validate(this.value);\n      }\n    });\n  };\n\n  private _onRenderLabel = (props: ITextFieldProps): JSX.Element | null => {\n    const { label, required } = props;\n    // IProcessedStyleSet definition requires casting for what Label expects as its styles prop\n    const labelStyles = this._classNames.subComponentStyles\n      ? (this._classNames.subComponentStyles.label as IStyleFunctionOrObject<ILabelStyleProps, ILabelStyles>)\n      : undefined;\n\n    if (label) {\n      return (\n        <Label required={required} htmlFor={this._id} styles={labelStyles} disabled={props.disabled} id={this._labelId}>\n          {props.label}\n        </Label>\n      );\n    }\n    return null;\n  };\n\n  private _onRenderDescription = (props: ITextFieldProps): JSX.Element | null => {\n    if (props.description) {\n      return <span className={this._classNames.description}>{props.description}</span>;\n    }\n    return null;\n  };\n\n  private _onRenderPrefix(props: ITextFieldProps): JSX.Element {\n    const { prefix } = props;\n    return <span style={{ paddingBottom: '1px' }}>{prefix}</span>;\n  }\n\n  private _onRenderSuffix(props: ITextFieldProps): JSX.Element {\n    const { suffix } = props;\n    return <span style={{ paddingBottom: '1px' }}>{suffix}</span>;\n  }\n\n  /**\n   * Current error message from either `props.errorMessage` or the result of `props.onGetErrorMessage`.\n   *\n   * - If there is no validation error or we have not validated the input value, errorMessage is an empty string.\n   * - If we have done the validation and there is validation error, errorMessage is the validation error message.\n   */\n  private get _errorMessage(): string | JSX.Element {\n    const { errorMessage = this.state.errorMessage } = this.props;\n    return errorMessage || '';\n  }\n\n  /**\n   * Renders error message based on the type of the message.\n   *\n   * - If error message is string, it will render using the built in styles.\n   * - If error message is an element, user has full control over how it's rendered.\n   */\n  private _renderErrorMessage(): JSX.Element | null {\n    const errorMessage = this._errorMessage;\n\n    return errorMessage ? (\n      typeof errorMessage === 'string' ? (\n        <p className={this._classNames.errorMessage}>\n          <span data-automation-id=\"error-message\">{errorMessage}</span>\n        </p>\n      ) : (\n        <div className={this._classNames.errorMessage} data-automation-id=\"error-message\">\n          {errorMessage}\n        </div>\n      )\n    ) : null;\n  }\n\n  /**\n   * If a custom description render function is supplied then treat description as always available.\n   * Otherwise defer to the presence of description or error message text.\n   */\n  private get _isDescriptionAvailable(): boolean {\n    const props = this.props;\n    return !!(props.onRenderDescription || props.description || this._errorMessage);\n  }\n\n  private _renderTextArea(): React.ReactElement<React.HTMLAttributes<HTMLAreaElement>> {\n    const { invalid = !!this._errorMessage } = this.props;\n    const textAreaProps = getNativeProps<React.TextareaHTMLAttributes<HTMLTextAreaElement>>(\n      this.props,\n      textAreaProperties,\n      ['defaultValue'],\n    );\n    const ariaLabelledBy = this.props['aria-labelledby'] || (this.props.label ? this._labelId : undefined);\n    return (\n      <textarea\n        id={this._id}\n        {...textAreaProps}\n        ref={this._textElement as React.RefObject<HTMLTextAreaElement>}\n        value={this.value || ''}\n        onInput={this._onInputChange}\n        onChange={this._onInputChange}\n        className={this._classNames.field}\n        aria-labelledby={ariaLabelledBy}\n        aria-describedby={this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby']}\n        aria-invalid={invalid}\n        aria-label={this.props.ariaLabel}\n        readOnly={this.props.readOnly}\n        onFocus={this._onFocus}\n        onBlur={this._onBlur}\n      />\n    );\n  }\n\n  private _renderInput(): JSX.Element | null {\n    const {\n      ariaLabel,\n      invalid = !!this._errorMessage,\n      onRenderPrefix,\n      onRenderSuffix,\n      prefix,\n      suffix,\n      type = 'text',\n      label,\n    } = this.props;\n\n    // build aria-labelledby list from label, prefix, and suffix\n    const labelIds = [];\n    label && labelIds.push(this._labelId);\n    (prefix !== undefined || onRenderPrefix) && labelIds.push(this._prefixId);\n    (suffix !== undefined || onRenderSuffix) && labelIds.push(this._suffixId);\n\n    const inputProps: React.InputHTMLAttributes<HTMLInputElement> & React.RefAttributes<HTMLInputElement> = {\n      type: this.state.isRevealingPassword ? 'text' : type,\n      id: this._id,\n      ...getNativeProps(this.props, inputProperties, ['defaultValue', 'type']),\n      'aria-labelledby': this.props['aria-labelledby'] || (labelIds.length > 0 ? labelIds.join(' ') : undefined),\n      ref: this._textElement as React.RefObject<HTMLInputElement>,\n      value: this.value || '',\n      onInput: this._onInputChange,\n      onChange: this._onInputChange,\n      className: this._classNames.field,\n      'aria-label': ariaLabel,\n      'aria-describedby': this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby'],\n      'aria-invalid': invalid,\n      onFocus: this._onFocus,\n      onBlur: this._onBlur,\n    };\n\n    const defaultRender = (updatedInputProps: React.InputHTMLAttributes<HTMLInputElement>) => {\n      return <input {...updatedInputProps} />;\n    };\n    const onRenderInput = this.props.onRenderInput || defaultRender;\n    return onRenderInput(inputProps, defaultRender);\n  }\n\n  private _onRevealButtonClick = (event: React.MouseEvent<HTMLButtonElement>): void => {\n    this.setState(prevState => ({ isRevealingPassword: !prevState.isRevealingPassword }));\n  };\n\n  private _onInputChange = (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    // Previously, we needed to call both onInput and onChange due to some weird IE/React issues,\n    // which have *probably* been fixed now:\n    // - https://github.com/microsoft/fluentui/issues/744 (likely fixed)\n    // - https://github.com/microsoft/fluentui/issues/824 (confirmed fixed)\n\n    // TODO (Fabric 8?) - Switch to calling only onChange. This switch is pretty disruptive for\n    // tests (ours and maybe consumers' too), so it seemed best to do the switch in a major bump.\n\n    const element = event.target as HTMLInputElement;\n    const value = element.value;\n    // Ignore this event if any of the following are true:\n    // - the value is undefined (in case one of the IE bugs comes back)\n    // - it's a duplicate event (important since onInputChange is called twice per actual user event)\n    // - it's the same as the previous value\n    const previousValue = _getValue(this.props, this.state) || '';\n    if (value === undefined || value === this._lastChangeValue || value === previousValue) {\n      this._lastChangeValue = undefined;\n      return;\n    }\n    this._lastChangeValue = value;\n\n    this.props.onChange?.(event, value);\n\n    if (!this._isControlled) {\n      // ONLY if this is an uncontrolled component, update the displayed value.\n      // (Controlled components must update the `value` prop from `onChange`.)\n      this.setState({ uncontrolledValue: value });\n    }\n  };\n\n  private _validate(value: string | undefined): void {\n    // In case _validate is called again while validation promise is executing\n    if (this._latestValidateValue === value && _shouldValidateAllChanges(this.props)) {\n      return;\n    }\n\n    this._latestValidateValue = value;\n    const onGetErrorMessage = this.props.onGetErrorMessage;\n    const result = onGetErrorMessage && onGetErrorMessage(value || '');\n\n    if (result !== undefined) {\n      if (typeof result === 'string' || !('then' in result)) {\n        this.setState({ errorMessage: result });\n        this._notifyAfterValidate(value, result);\n      } else {\n        const currentValidation: number = ++this._lastValidation;\n\n        result.then((errorMessage: string | JSX.Element) => {\n          if (currentValidation === this._lastValidation) {\n            this.setState({ errorMessage });\n          }\n          this._notifyAfterValidate(value, errorMessage);\n        });\n      }\n    } else {\n      this._notifyAfterValidate(value, '');\n    }\n  }\n\n  private _notifyAfterValidate(value: string | undefined, errorMessage: string | JSX.Element): void {\n    if (value === this.value && this.props.onNotifyValidationResult) {\n      this.props.onNotifyValidationResult(errorMessage, value);\n    }\n  }\n\n  private _adjustInputHeight(): void {\n    if (this._textElement.current && this.props.autoAdjustHeight && this.props.multiline) {\n      const textField = this._textElement.current;\n      textField.style.height = '';\n      textField.style.height = textField.scrollHeight + 'px';\n    }\n  }\n}\n\n/** Get the value from the given state and props (converting from number to string if needed) */\nfunction _getValue(props: ITextFieldProps, state: ITextFieldState): string | undefined {\n  const { value = state.uncontrolledValue } = props;\n  if (typeof value === 'number') {\n    // not allowed per typings, but happens anyway\n    return String(value);\n  }\n  return value;\n}\n\n/**\n * If `validateOnFocusIn` or `validateOnFocusOut` is true, validation should run **only** on that event.\n * Otherwise, validation should run on every change.\n */\nfunction _shouldValidateAllChanges(props: ITextFieldProps): boolean {\n  return !(props.validateOnFocusIn || props.validateOnFocusOut);\n}\n\n// Only calculate this once across all TextFields, since will stay the same\nlet __browserNeedsRevealButton: boolean | undefined;\n\nfunction _browserNeedsRevealButton() {\n  if (typeof __browserNeedsRevealButton !== 'boolean') {\n    const win = getWindow();\n\n    if (win?.navigator) {\n      // Edge, Chromium Edge\n      const isEdge = /^Edg/.test(win.navigator.userAgent || '');\n\n      __browserNeedsRevealButton = !(isIE11() || isEdge);\n    } else {\n      __browserNeedsRevealButton = true;\n    }\n  }\n  return __browserNeedsRevealButton;\n}\n","import { getWindow } from './dom/getWindow';\n\nexport const isIE11 = (): boolean => {\n  const win = getWindow();\n\n  if (!win?.navigator?.userAgent) {\n    return false;\n  }\n\n  return win.navigator.userAgent.indexOf('rv:11.0') > -1;\n};\n","/**\n * Determines whether a component is controlled.\n * @param props - Component props\n * @param valueProp - Prop containing the controlled value\n * @returns true if controlled, false if uncontrolled\n */\nexport function isControlled<P>(props: P, valueProp: keyof P): boolean {\n  // React's built-in <input> considers a prop to be provided if its value is non-null/undefined.\n  // Mirror that behavior here (rather than checking for just undefined).\n  return props[valueProp] !== undefined && props[valueProp] !== null;\n}\n","import {\n  AnimationClassNames,\n  getFocusStyle,\n  getGlobalClassNames,\n  getInputFocusStyle,\n  HighContrastSelector,\n  normalize,\n  getPlaceholderStyles,\n  IconFontSizes,\n  getHighContrastNoAdjustStyle,\n} from '../../Styling';\nimport type { IStyle } from '../../Styling';\nimport type { ILabelStyles, ILabelStyleProps } from '../../Label';\nimport type { ITextFieldStyleProps, ITextFieldStyles } from './TextField.types';\nimport type { IStyleFunctionOrObject } from '@fluentui/utilities';\n\nconst globalClassNames = {\n  root: 'ms-TextField',\n  description: 'ms-TextField-description',\n  errorMessage: 'ms-TextField-errorMessage',\n  field: 'ms-TextField-field',\n  fieldGroup: 'ms-TextField-fieldGroup',\n  prefix: 'ms-TextField-prefix',\n  suffix: 'ms-TextField-suffix',\n  wrapper: 'ms-TextField-wrapper',\n  revealButton: 'ms-TextField-reveal',\n\n  multiline: 'ms-TextField--multiline',\n  borderless: 'ms-TextField--borderless',\n  underlined: 'ms-TextField--underlined',\n  unresizable: 'ms-TextField--unresizable',\n\n  required: 'is-required',\n  disabled: 'is-disabled',\n  active: 'is-active',\n};\n\nfunction getLabelStyles(props: ITextFieldStyleProps): IStyleFunctionOrObject<ILabelStyleProps, ILabelStyles> {\n  const { underlined, disabled, focused, theme } = props;\n  const { palette, fonts } = theme;\n\n  return () => ({\n    root: [\n      underlined &&\n        disabled && {\n          color: palette.neutralTertiary,\n        },\n      underlined && {\n        fontSize: fonts.medium.fontSize,\n        marginRight: 8,\n        paddingLeft: 12,\n        paddingRight: 0,\n        lineHeight: '22px',\n        height: 32,\n      },\n      underlined &&\n        focused && {\n          selectors: {\n            [HighContrastSelector]: {\n              height: 31, // -1px to prevent jumpiness in HC with the increased border-width to 2px\n            },\n          },\n        },\n    ],\n  });\n}\n\nexport function getStyles(props: ITextFieldStyleProps): ITextFieldStyles {\n  const {\n    theme,\n    className,\n    disabled,\n    focused,\n    required,\n    multiline,\n    hasLabel,\n    borderless,\n    underlined,\n    hasIcon,\n    resizable,\n    hasErrorMessage,\n    inputClassName,\n    autoAdjustHeight,\n    hasRevealButton,\n  } = props;\n\n  const { semanticColors, effects, fonts } = theme;\n\n  const classNames = getGlobalClassNames(globalClassNames, theme);\n\n  const fieldPrefixSuffix: IStyle = {\n    // Suffix/Prefix are not editable so the disabled slot perfectly fits.\n    background: semanticColors.disabledBackground,\n    color: !disabled ? semanticColors.inputPlaceholderText : semanticColors.disabledText,\n    display: 'flex',\n    alignItems: 'center',\n    padding: '0 10px',\n    lineHeight: 1,\n    whiteSpace: 'nowrap',\n    flexShrink: 0,\n    selectors: {\n      [HighContrastSelector]: {\n        background: 'Window',\n        color: disabled ? 'GrayText' : 'WindowText',\n      },\n    },\n  };\n\n  // placeholder style constants\n  const placeholderStyles: IStyle = [\n    {\n      color: semanticColors.inputPlaceholderText,\n      opacity: 1,\n      selectors: {\n        [HighContrastSelector]: {\n          color: 'GrayText',\n        },\n      },\n    },\n  ];\n\n  const disabledPlaceholderStyles: IStyle = {\n    color: semanticColors.disabledText,\n    selectors: {\n      [HighContrastSelector]: {\n        color: 'GrayText',\n      },\n    },\n  };\n\n  return {\n    root: [\n      classNames.root,\n      fonts.medium,\n      required && classNames.required,\n      disabled && classNames.disabled,\n      focused && classNames.active,\n      multiline && classNames.multiline,\n      borderless && classNames.borderless,\n      underlined && classNames.underlined,\n      normalize,\n      {\n        position: 'relative',\n      },\n      className,\n    ],\n    wrapper: [\n      classNames.wrapper,\n\n      underlined && [\n        {\n          display: 'flex',\n          borderBottom: `1px solid ${!hasErrorMessage ? semanticColors.inputBorder : semanticColors.errorText}`,\n          width: '100%',\n        },\n        disabled && {\n          borderBottomColor: semanticColors.disabledBackground,\n          selectors: {\n            [HighContrastSelector]: {\n              borderColor: 'GrayText',\n              ...getHighContrastNoAdjustStyle(),\n            },\n          },\n        },\n        !disabled && {\n          selectors: {\n            ':hover': {\n              borderBottomColor: !hasErrorMessage ? semanticColors.inputBorderHovered : semanticColors.errorText,\n              selectors: {\n                [HighContrastSelector]: {\n                  borderBottomColor: 'Highlight',\n                  ...getHighContrastNoAdjustStyle(),\n                },\n              },\n            },\n          },\n        },\n        focused && [\n          {\n            position: 'relative',\n          },\n          getInputFocusStyle(\n            !hasErrorMessage ? semanticColors.inputFocusBorderAlt : semanticColors.errorText,\n            0,\n            'borderBottom',\n          ),\n        ],\n      ],\n    ],\n    fieldGroup: [\n      classNames.fieldGroup,\n      normalize,\n      {\n        border: `1px solid ${semanticColors.inputBorder}`,\n        borderRadius: effects.roundedCorner2,\n        background: semanticColors.inputBackground,\n        cursor: 'text',\n        height: 32,\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'stretch',\n        position: 'relative',\n      },\n      multiline && {\n        minHeight: '60px',\n        height: 'auto',\n        display: 'flex',\n      },\n\n      !focused &&\n        !disabled && {\n          selectors: {\n            ':hover': {\n              borderColor: semanticColors.inputBorderHovered,\n              selectors: {\n                [HighContrastSelector]: {\n                  borderColor: 'Highlight',\n                  ...getHighContrastNoAdjustStyle(),\n                },\n              },\n            },\n          },\n        },\n\n      focused &&\n        !underlined &&\n        getInputFocusStyle(\n          !hasErrorMessage ? semanticColors.inputFocusBorderAlt : semanticColors.errorText,\n          effects.roundedCorner2,\n        ),\n      disabled && {\n        borderColor: semanticColors.disabledBackground,\n        selectors: {\n          [HighContrastSelector]: {\n            borderColor: 'GrayText',\n            ...getHighContrastNoAdjustStyle(),\n          },\n        },\n\n        cursor: 'default',\n      },\n      borderless && {\n        border: 'none',\n      },\n      borderless &&\n        focused && {\n          border: 'none',\n          selectors: {\n            ':after': {\n              border: 'none',\n            },\n          },\n        },\n      underlined && {\n        flex: '1 1 0px',\n        border: 'none',\n        textAlign: 'left',\n      },\n      underlined &&\n        disabled && {\n          backgroundColor: 'transparent',\n        },\n\n      hasErrorMessage &&\n        !underlined && {\n          borderColor: semanticColors.errorText,\n          selectors: {\n            '&:hover': {\n              borderColor: semanticColors.errorText,\n            },\n          },\n        },\n      !hasLabel &&\n        required && {\n          selectors: {\n            ':before': {\n              content: `'*'`,\n              color: semanticColors.errorText,\n              position: 'absolute',\n              top: -5,\n              right: -10,\n            },\n            [HighContrastSelector]: {\n              selectors: {\n                ':before': {\n                  color: 'WindowText',\n                  right: -14, // moving the * 4 pixel to right to alleviate border clipping in HC mode.\n                },\n              },\n            },\n          },\n        },\n    ],\n    field: [\n      fonts.medium,\n      classNames.field,\n      normalize,\n      {\n        borderRadius: 0,\n        border: 'none',\n        background: 'none',\n        backgroundColor: 'transparent',\n        color: semanticColors.inputText,\n        padding: '0 8px',\n        width: '100%',\n        minWidth: 0,\n        textOverflow: 'ellipsis',\n        outline: 0,\n        selectors: {\n          '&:active, &:focus, &:hover': { outline: 0 },\n          '::-ms-clear': {\n            display: 'none',\n          },\n          [HighContrastSelector]: {\n            background: 'Window',\n            color: disabled ? 'GrayText' : 'WindowText',\n          },\n        },\n      },\n      getPlaceholderStyles(placeholderStyles),\n      multiline &&\n        !resizable && [\n          classNames.unresizable,\n          {\n            resize: 'none',\n          },\n        ],\n      multiline && {\n        minHeight: 'inherit',\n        lineHeight: 17,\n        flexGrow: 1,\n        paddingTop: 6,\n        paddingBottom: 6,\n        overflow: 'auto',\n        width: '100%',\n      },\n      multiline &&\n        autoAdjustHeight && {\n          overflow: 'hidden',\n        },\n      hasIcon &&\n        !hasRevealButton && {\n          paddingRight: 24,\n        },\n      multiline &&\n        hasIcon && {\n          paddingRight: 40,\n        },\n      disabled && [\n        {\n          backgroundColor: semanticColors.disabledBackground,\n          color: semanticColors.disabledText,\n          borderColor: semanticColors.disabledBackground,\n        },\n        getPlaceholderStyles(disabledPlaceholderStyles),\n      ],\n      underlined && {\n        textAlign: 'left',\n      },\n      focused &&\n        !borderless && {\n          selectors: {\n            [HighContrastSelector]: {\n              paddingLeft: 11,\n              paddingRight: 11,\n            },\n          },\n        },\n      focused &&\n        multiline &&\n        !borderless && {\n          selectors: {\n            [HighContrastSelector]: {\n              paddingTop: 4, // take into consideration the 2px increased border-width (not when borderless).\n            },\n          },\n        },\n      inputClassName,\n    ],\n    icon: [\n      multiline && {\n        paddingRight: 24,\n        alignItems: 'flex-end',\n      },\n      {\n        pointerEvents: 'none',\n        position: 'absolute',\n        bottom: 6,\n        right: 8,\n        top: 'auto',\n        fontSize: IconFontSizes.medium,\n        lineHeight: 18,\n      },\n      disabled && {\n        color: semanticColors.disabledText,\n      },\n    ],\n    description: [\n      classNames.description,\n      {\n        color: semanticColors.bodySubtext,\n        fontSize: fonts.xSmall.fontSize,\n      },\n    ],\n    errorMessage: [\n      classNames.errorMessage,\n      AnimationClassNames.slideDownIn20,\n      fonts.small,\n      {\n        color: semanticColors.errorText,\n        margin: 0,\n        paddingTop: 5,\n        display: 'flex',\n        alignItems: 'center',\n      },\n    ],\n    prefix: [classNames.prefix, fieldPrefixSuffix],\n    suffix: [classNames.suffix, fieldPrefixSuffix],\n    revealButton: [\n      classNames.revealButton,\n      'ms-Button',\n      'ms-Button--icon',\n      getFocusStyle(theme, { inset: 1 }),\n      {\n        height: 30,\n        width: 32,\n        border: 'none',\n        padding: '0px 4px',\n        backgroundColor: 'transparent',\n        color: semanticColors.link,\n        selectors: {\n          ':hover': {\n            outline: 0,\n            color: semanticColors.primaryButtonBackgroundHovered,\n            backgroundColor: semanticColors.buttonBackgroundHovered,\n            selectors: {\n              [HighContrastSelector]: {\n                borderColor: 'Highlight',\n                color: 'Highlight',\n              },\n            },\n          },\n          ':focus': { outline: 0 },\n        },\n      },\n      hasIcon && {\n        marginRight: 28,\n      },\n    ],\n    revealSpan: {\n      display: 'flex',\n      height: '100%',\n      alignItems: 'center',\n    },\n    revealIcon: {\n      margin: '0px 4px',\n      pointerEvents: 'none',\n      bottom: 6,\n      right: 8,\n      top: 'auto',\n      fontSize: IconFontSizes.medium,\n      lineHeight: 18,\n    },\n    subComponentStyles: {\n      label: getLabelStyles(props),\n    },\n  };\n}\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { TextFieldBase } from './TextField.base';\nimport { getStyles } from './TextField.styles';\nimport type { ITextFieldProps, ITextFieldStyles, ITextFieldStyleProps } from './TextField.types';\n\nexport const TextField: React.FunctionComponent<ITextFieldProps> = styled<\n  ITextFieldProps,\n  ITextFieldStyleProps,\n  ITextFieldStyles\n>(TextFieldBase, getStyles, undefined, {\n  scope: 'TextField',\n});\n\nexport type { ITextField } from './TextField.types';\n","import * as React from 'react';\nimport { createComponent } from '@fluentui/foundation-legacy';\nimport { TextView } from './Text.view';\nimport { TextStyles as styles } from './Text.styles';\nimport type { ITextProps } from './Text.types';\n\nexport const Text: React.FunctionComponent<ITextProps> = createComponent(TextView, {\n  displayName: 'Text',\n  styles,\n});\n\nexport default Text;\n","/** @jsxRuntime classic */\n/** @jsx withSlots */\nimport { withSlots, getSlots } from '@fluentui/foundation-legacy';\nimport { getNativeProps, htmlElementProperties } from '../../Utilities';\nimport type { ITextComponent, ITextProps, ITextSlots } from './Text.types';\n\nexport const TextView: ITextComponent['view'] = props => {\n  // eslint-disable-next-line eqeqeq\n  if (props.children == null) {\n    return null;\n  }\n\n  const { block, className, as: RootType = 'span', variant, nowrap, ...rest } = props;\n\n  const Slots = getSlots<ITextProps, ITextSlots>(props, {\n    root: RootType,\n  });\n\n  return <Slots.root {...getNativeProps(rest, htmlElementProperties)} />;\n};\n","import type { ITextComponent, ITextStyles, ITextStylesReturnType, ITextProps } from './Text.types';\nimport type { ITheme } from '../../Styling';\n\nexport const TextStyles: ITextComponent['styles'] = (props: ITextProps, theme: ITheme): ITextStylesReturnType => {\n  const { as, className, block, nowrap, variant } = props;\n  const { fonts, semanticColors } = theme;\n  const variantObject = fonts[variant || 'medium'];\n\n  return {\n    root: [\n      variantObject,\n      {\n        color: variantObject.color || semanticColors.bodyText,\n        display: block ? (as === 'td' ? 'table-cell' : 'block') : 'inline',\n        mozOsxFontSmoothing: variantObject.MozOsxFontSmoothing,\n        webkitFontSmoothing: variantObject.WebkitFontSmoothing,\n      },\n      nowrap && {\n        whiteSpace: 'nowrap',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n      },\n      className,\n    ],\n  } as ITextStyles;\n};\n","import * as React from 'react';\nimport { useControllableValue, useId, useWarnings } from '@fluentui/react-hooks';\nimport { classNamesFunction, getNativeProps, inputProperties, useFocusRects } from '@fluentui/utilities';\nimport { Label } from '../Label/Label';\nimport type { IToggleProps, IToggleStyleProps, IToggleStyles, IToggle } from './Toggle.types';\n\nconst getClassNames = classNamesFunction<IToggleStyleProps, IToggleStyles>();\n\nconst COMPONENT_NAME = 'Toggle';\n\nexport const ToggleBase: React.FunctionComponent<IToggleProps> = React.forwardRef<HTMLElement, IToggleProps>(\n  (props, forwardedRef) => {\n    const {\n      as: RootType = 'div',\n      ariaLabel,\n      checked: controlledChecked,\n      className,\n      defaultChecked = false,\n      disabled,\n      inlineLabel,\n      label,\n      // eslint-disable-next-line deprecation/deprecation\n      offAriaLabel,\n      offText,\n      // eslint-disable-next-line deprecation/deprecation\n      onAriaLabel,\n      onChange,\n      // eslint-disable-next-line deprecation/deprecation\n      onChanged,\n      onClick: onToggleClick,\n      onText,\n      role,\n      styles,\n      theme,\n    } = props;\n\n    const [checked, setChecked] = useControllableValue(\n      controlledChecked,\n      defaultChecked,\n      React.useCallback(\n        (ev: React.MouseEvent<HTMLElement>, isChecked: boolean) => {\n          onChange?.(ev, isChecked);\n          onChanged?.(isChecked);\n        },\n        [onChange, onChanged],\n      ),\n    );\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      disabled,\n      checked,\n      inlineLabel,\n      onOffMissing: !onText && !offText,\n    });\n    const badAriaLabel = checked ? onAriaLabel : offAriaLabel;\n    const id = useId(COMPONENT_NAME, props.id);\n    const labelId = `${id}-label`;\n    const stateTextId = `${id}-stateText`;\n    const stateText = checked ? onText : offText;\n    const toggleNativeProps = getNativeProps<React.HTMLAttributes<HTMLButtonElement>>(props, inputProperties, [\n      'defaultChecked',\n    ]);\n\n    // The following properties take priority for what Narrator should read:\n    // 1. ariaLabel\n    // 2. onAriaLabel (if checked) or offAriaLabel (if not checked)\n    // 3. label, if existent\n\n    let labelledById: string | undefined = undefined;\n    if (!ariaLabel && !badAriaLabel) {\n      if (label) {\n        labelledById = labelId;\n      }\n      if (stateText && !labelledById) {\n        labelledById = stateTextId;\n      }\n    }\n\n    const toggleButton = React.useRef<HTMLButtonElement>(null);\n    useFocusRects(toggleButton);\n    useComponentRef(props, checked, toggleButton);\n\n    if (process.env.NODE_ENV !== 'production') {\n      // eslint-disable-next-line react-hooks/rules-of-hooks -- build-time conditional\n      useWarnings({\n        name: COMPONENT_NAME,\n        props,\n        deprecations: {\n          offAriaLabel: undefined,\n          onAriaLabel: 'ariaLabel',\n          onChanged: 'onChange',\n        },\n        mutuallyExclusive: { checked: 'defaultChecked' },\n      });\n    }\n\n    const onClick = (ev: React.MouseEvent<HTMLElement>) => {\n      if (!disabled) {\n        setChecked(!checked, ev);\n        if (onToggleClick) {\n          onToggleClick(ev);\n        }\n      }\n    };\n\n    const slotProps = {\n      root: {\n        className: classNames.root,\n        hidden: toggleNativeProps.hidden,\n      },\n      label: {\n        children: label,\n        className: classNames.label,\n        htmlFor: id,\n        id: labelId,\n      },\n      container: {\n        className: classNames.container,\n      },\n      pill: {\n        ...toggleNativeProps,\n        'aria-disabled': disabled,\n        'aria-checked': checked,\n        'aria-label': ariaLabel ? ariaLabel : badAriaLabel,\n        'aria-labelledby': labelledById,\n        className: classNames.pill,\n        'data-is-focusable': true,\n        'data-ktp-target': true,\n        disabled: disabled,\n        id: id,\n        onClick: onClick,\n        ref: toggleButton,\n        role: role ? role : 'switch',\n        type: 'button' as React.ButtonHTMLAttributes<HTMLButtonElement>['type'],\n      },\n      thumb: {\n        className: classNames.thumb,\n      },\n      stateText: {\n        children: stateText,\n        className: classNames.text,\n        htmlFor: id,\n        id: stateTextId,\n      },\n    };\n\n    return (\n      <RootType ref={forwardedRef as React.Ref<HTMLDivElement>} {...slotProps.root}>\n        {label && <Label {...slotProps.label} />}\n        <div {...slotProps.container}>\n          <button {...slotProps.pill}>\n            <span {...slotProps.thumb} />\n          </button>\n          {((checked && onText) || offText) && <Label {...slotProps.stateText} />}\n        </div>\n      </RootType>\n    );\n  },\n);\n\nToggleBase.displayName = COMPONENT_NAME + 'Base';\n\nconst useComponentRef = (\n  props: IToggleProps,\n  isChecked: boolean | undefined,\n  toggleButtonRef: React.RefObject<IToggle>,\n) => {\n  React.useImperativeHandle(\n    props.componentRef,\n    () => ({\n      get checked() {\n        return !!isChecked;\n      },\n      focus() {\n        if (toggleButtonRef.current) {\n          toggleButtonRef.current.focus();\n        }\n      },\n    }),\n    [isChecked, toggleButtonRef],\n  );\n};\n","import * as React from 'react';\nimport { useConst } from './useConst';\n\nexport type ChangeCallback<\n  TElement extends HTMLElement,\n  TValue,\n  TEvent extends React.SyntheticEvent<TElement> | undefined\n> = (ev: TEvent, newValue: TValue | undefined) => void;\n\n/**\n * Hook to manage a value that could be either controlled or uncontrolled, such as a checked state or\n * text box string.\n * @param controlledValue - The controlled value passed in the props. This value will always be used if provided,\n * and the internal state will be updated to reflect it.\n * @param defaultUncontrolledValue - Initial value for the internal state in the uncontrolled case.\n * @returns An array of the current value and an updater callback. Like `React.useState`, the updater\n * callback always has the same identity, and it can take either a new value, or a function which\n * is passed the previous value and returns the new value.\n * @see https://reactjs.org/docs/uncontrolled-components.html\n */\nexport function useControllableValue<TValue, TElement extends HTMLElement>(\n  controlledValue: TValue | undefined,\n  defaultUncontrolledValue: TValue | undefined,\n): Readonly<[TValue | undefined, (update: React.SetStateAction<TValue | undefined>) => void]>;\nexport function useControllableValue<\n  TValue,\n  TElement extends HTMLElement,\n  TEvent extends React.SyntheticEvent<TElement> | undefined\n>(\n  controlledValue: TValue | undefined,\n  defaultUncontrolledValue: TValue | undefined,\n  onChange: ChangeCallback<TElement, TValue, TEvent> | undefined,\n): Readonly<\n  [TValue | undefined, (update: React.SetStateAction<TValue | undefined>, ev?: React.FormEvent<TElement>) => void]\n>;\nexport function useControllableValue<\n  TValue,\n  TElement extends HTMLElement,\n  TEvent extends React.SyntheticEvent<TElement> | undefined\n>(\n  controlledValue: TValue | undefined,\n  defaultUncontrolledValue: TValue | undefined,\n  onChange?: ChangeCallback<TElement, TValue, TEvent>,\n) {\n  const [value, setValue] = React.useState<TValue | undefined>(defaultUncontrolledValue);\n  const isControlled = useConst<boolean>(controlledValue !== undefined);\n  const currentValue = isControlled ? controlledValue : value;\n\n  // Duplicate the current value and onChange in refs so they're accessible from\n  // setValueOrCallOnChange without creating a new callback every time\n  const valueRef = React.useRef(currentValue);\n  const onChangeRef = React.useRef(onChange);\n  React.useEffect(() => {\n    valueRef.current = currentValue;\n    onChangeRef.current = onChange;\n  });\n\n  // To match the behavior of the setter returned by React.useState, this callback's identity\n  // should never change. This means it MUST NOT directly reference variables that can change.\n  const setValueOrCallOnChange = useConst(() => (update: React.SetStateAction<TValue | undefined>, ev?: TEvent) => {\n    // Assuming here that TValue is not a function, because a controllable value will typically\n    // be something a user can enter as input\n    const newValue = typeof update === 'function' ? (update as Function)(valueRef.current) : update;\n\n    if (onChangeRef.current) {\n      onChangeRef.current(ev!, newValue);\n    }\n\n    if (!isControlled) {\n      setValue(newValue);\n    }\n  });\n\n  return [currentValue, setValueOrCallOnChange] as const;\n}\n","import * as React from 'react';\nimport { styled } from '@fluentui/utilities';\nimport { ToggleBase } from './Toggle.base';\nimport { getStyles } from './Toggle.styles';\nimport type { IToggleProps, IToggleStyleProps, IToggleStyles } from './Toggle.types';\n\nexport const Toggle: React.FunctionComponent<IToggleProps> = styled<IToggleProps, IToggleStyleProps, IToggleStyles>(\n  ToggleBase,\n  getStyles,\n  undefined,\n  {\n    scope: 'Toggle',\n  },\n);\n","import {\n  HighContrastSelector,\n  getFocusStyle,\n  FontWeights,\n  getHighContrastNoAdjustStyle,\n} from '@fluentui/style-utilities';\nimport type { IToggleStyleProps, IToggleStyles } from './Toggle.types';\n\nconst DEFAULT_PILL_WIDTH = 40;\nconst DEFAULT_PILL_HEIGHT = 20;\nconst DEFAULT_THUMB_SIZE = 12;\n\nexport const getStyles = (props: IToggleStyleProps): IToggleStyles => {\n  const { theme, className, disabled, checked, inlineLabel, onOffMissing } = props;\n  const { semanticColors, palette } = theme;\n\n  // Tokens\n  const pillUncheckedBackground = semanticColors.bodyBackground;\n  const pillCheckedBackground = semanticColors.inputBackgroundChecked;\n  const pillCheckedHoveredBackground = semanticColors.inputBackgroundCheckedHovered;\n  const thumbUncheckedHoveredBackground = palette.neutralDark;\n  const pillCheckedDisabledBackground = semanticColors.disabledBodySubtext;\n  const thumbBackground = semanticColors.smallInputBorder;\n  const thumbCheckedBackground = semanticColors.inputForegroundChecked;\n  const thumbDisabledBackground = semanticColors.disabledBodySubtext;\n  const thumbCheckedDisabledBackground = semanticColors.disabledBackground;\n  const pillBorderColor = semanticColors.smallInputBorder;\n  const pillBorderHoveredColor = semanticColors.inputBorderHovered;\n  const pillBorderDisabledColor = semanticColors.disabledBodySubtext;\n  const textDisabledColor = semanticColors.disabledText;\n\n  return {\n    root: [\n      'ms-Toggle',\n      checked && 'is-checked',\n      !disabled && 'is-enabled',\n      disabled && 'is-disabled',\n      theme.fonts.medium,\n      {\n        marginBottom: '8px',\n      },\n      inlineLabel && {\n        display: 'flex',\n        alignItems: 'center',\n      },\n      className,\n    ],\n\n    label: [\n      'ms-Toggle-label',\n      { display: 'inline-block' },\n      disabled && {\n        color: textDisabledColor,\n        selectors: {\n          [HighContrastSelector]: {\n            color: 'GrayText',\n          },\n        },\n      },\n      inlineLabel &&\n        !onOffMissing && {\n          marginRight: 16,\n        },\n      onOffMissing &&\n        inlineLabel && {\n          order: 1,\n          marginLeft: 16,\n        },\n      inlineLabel && { wordBreak: 'break-word' },\n    ],\n\n    container: [\n      'ms-Toggle-innerContainer',\n      {\n        display: 'flex',\n        position: 'relative',\n      },\n    ],\n\n    pill: [\n      'ms-Toggle-background',\n      getFocusStyle(theme, { inset: -3 }),\n      {\n        fontSize: '20px',\n        boxSizing: 'border-box',\n        width: DEFAULT_PILL_WIDTH,\n        height: DEFAULT_PILL_HEIGHT,\n        borderRadius: DEFAULT_PILL_HEIGHT / 2,\n        transition: 'all 0.1s ease',\n        border: `1px solid ${pillBorderColor}`,\n        background: pillUncheckedBackground,\n        cursor: 'pointer',\n        display: 'flex',\n        alignItems: 'center',\n        padding: '0 3px',\n      },\n      !disabled && [\n        !checked && {\n          selectors: {\n            ':hover': [\n              {\n                borderColor: pillBorderHoveredColor,\n              },\n            ],\n            ':hover .ms-Toggle-thumb': [\n              {\n                backgroundColor: thumbUncheckedHoveredBackground,\n                selectors: {\n                  [HighContrastSelector]: {\n                    borderColor: 'Highlight',\n                  },\n                },\n              },\n            ],\n          },\n        },\n        checked && [\n          {\n            background: pillCheckedBackground,\n            borderColor: 'transparent',\n            justifyContent: 'flex-end',\n          },\n          {\n            selectors: {\n              ':hover': [\n                {\n                  backgroundColor: pillCheckedHoveredBackground,\n                  borderColor: 'transparent',\n                  selectors: {\n                    [HighContrastSelector]: {\n                      backgroundColor: 'Highlight',\n                    },\n                  },\n                },\n              ],\n              [HighContrastSelector]: {\n                backgroundColor: 'Highlight',\n                ...getHighContrastNoAdjustStyle(),\n              },\n            },\n          },\n        ],\n      ],\n      disabled && [\n        {\n          cursor: 'default',\n        },\n        !checked && [\n          {\n            borderColor: pillBorderDisabledColor,\n          },\n        ],\n        checked && [\n          {\n            backgroundColor: pillCheckedDisabledBackground,\n            borderColor: 'transparent',\n            justifyContent: 'flex-end',\n          },\n        ],\n      ],\n      !disabled && {\n        selectors: {\n          '&:hover': {\n            selectors: {\n              [HighContrastSelector]: {\n                borderColor: 'Highlight',\n              },\n            },\n          },\n        },\n      },\n    ],\n\n    thumb: [\n      'ms-Toggle-thumb',\n      {\n        display: 'block',\n        width: DEFAULT_THUMB_SIZE,\n        height: DEFAULT_THUMB_SIZE,\n        borderRadius: '50%',\n        transition: 'all 0.1s ease',\n        backgroundColor: thumbBackground,\n        /* Border is added to handle high contrast mode for Firefox */\n        borderColor: 'transparent',\n        borderWidth: DEFAULT_THUMB_SIZE / 2,\n        borderStyle: 'solid',\n        boxSizing: 'border-box',\n      },\n      !disabled &&\n        checked && [\n          {\n            backgroundColor: thumbCheckedBackground,\n            selectors: {\n              [HighContrastSelector]: {\n                backgroundColor: 'Window',\n                borderColor: 'Window',\n              },\n            },\n          },\n        ],\n      disabled && [\n        !checked && [\n          {\n            backgroundColor: thumbDisabledBackground,\n          },\n        ],\n        checked && [\n          {\n            backgroundColor: thumbCheckedDisabledBackground,\n          },\n        ],\n      ],\n    ],\n\n    text: [\n      'ms-Toggle-stateText',\n      {\n        selectors: {\n          // Workaround: make rules more specific than Label rules.\n          '&&': {\n            padding: '0',\n            margin: '0 8px',\n            userSelect: 'none',\n            fontWeight: FontWeights.regular,\n          },\n        },\n      },\n      disabled && {\n        selectors: {\n          '&&': {\n            color: textDisabledColor,\n            selectors: {\n              [HighContrastSelector]: {\n                color: 'GrayText',\n              },\n            },\n          },\n        },\n      },\n    ],\n  };\n};\n"],"names":["getStyles","memoizeFunction","theme","customStyles","primary","baseButtonStyles","getBaseButtonStyles","splitButtonStyles","getSplitButtonStyles","defaultButtonStyles","root","minWidth","height","label","fontWeight","FontWeights","concatStyleSets","p","s","backgroundColor","primaryButtonBackground","border","color","primaryButtonText","selectors","_a","HighContrastSelector","__assign","borderColor","getHighContrastNoAdjustStyle","IsFocusVisibleClassName","outlineColor","white","rootHovered","primaryButtonBackgroundHovered","primaryButtonTextHovered","_b","rootPressed","primaryButtonBackgroundPressed","primaryButtonTextPressed","_c","rootExpanded","rootChecked","rootCheckedHovered","rootDisabled","primaryButtonTextDisabled","primaryButtonBackgroundDisabled","_d","splitButtonContainer","_e","splitButtonDivider","position","width","right","top","bottom","_f","splitButtonMenuButton","_g","_h","splitButtonMenuButtonDisabled","splitButtonMenuButtonChecked","splitButtonMenuButtonExpanded","splitButtonMenuIcon","splitButtonMenuIconDisabled","neutralTertiary","_j","primaryStyles","buttonBackground","buttonBackgroundPressed","buttonBackgroundHovered","buttonBackgroundDisabled","buttonText","buttonTextHovered","buttonTextDisabled","buttonTextChecked","buttonTextCheckedHovered","neutralLight","neutralTertiaryAlt","splitButtonDividerDisabled","palette","neutralQuaternaryAlt","standardStyles","__extends","DefaultButton","this","props","styles","React","BaseButton","variantClassName","onRenderDescription","nullRender","customizable","PrimaryButton","getClassNames","classNamesFunction","cacheSize","LabelBase","RootType","children","className","disabled","required","classNames","getNativeProps","divProperties","Label","styled","semanticColors","labelFontWeight","labelColor","bodyText","labelDisabledColor","disabledBodyText","labelRequiredStarColor","errorText","fonts","medium","boxSizing","boxShadow","margin","display","padding","wordWrap","overflowWrap","content","paddingRight","undefined","scope","_super","_this","state","isRendered","DelayedRender","delay","_timeoutId","window","setTimeout","setState","clearTimeout","__browserNeedsRevealButton","COMPONENT_NAME","ev","onFocus","isFocused","validateOnFocusIn","_validate","value","onBlur","validateOnFocusOut","labelStyles","_classNames","subComponentStyles","htmlFor","_id","id","_labelId","description","event","prevState","isRevealingPassword","target","previousValue","_getValue","_lastChangeValue","onChange","_isControlled","uncontrolledValue","initializeComponentRef","_async","Async","_fallbackId","getId","_descriptionId","_prefixId","_suffixId","_warnControlledUsage","defaultValue","String","errorMessage","_delayedValidate","debounce","deferredValidationTime","_lastValidation","Object","TextFieldBase","_adjustInputHeight","validateOnLoad","dispose","prevProps","selection","selectionStart","selectionEnd","snapshot","start","end","multiline","focus","setSelectionRange","prevValue","_shouldValidateAllChanges","borderless","invalid","iconProps","inputClassName","underlined","prefix","resizable","suffix","autoAdjustHeight","canRevealPassword","revealPasswordAriaLabel","type","onRenderPrefix","_onRenderPrefix","onRenderSuffix","_onRenderSuffix","onRenderLabel","_onRenderLabel","_onRenderDescription","_errorMessage","isInvalid","hasRevealButton","win","getWindow","navigator","isEdge","test","userAgent","indexOf","isIE11","_browserNeedsRevealButton","focused","hasLabel","hasErrorMessage","hasIcon","ref","elementRef","wrapper","fieldGroup","_renderTextArea","_renderInput","Icon","icon","revealButton","onClick","_onRevealButtonClick","revealSpan","revealIcon","iconName","_isDescriptionAvailable","role","_renderErrorMessage","_textElement","current","blur","select","_hasWarnedNullValue","warn","valueProp","style","paddingBottom","textAreaProps","textAreaProperties","ariaLabelledBy","onInput","_onInputChange","field","ariaLabel","readOnly","_onFocus","_onBlur","labelIds","push","inputProps","inputProperties","length","join","defaultRender","updatedInputProps","onRenderInput","_latestValidateValue","onGetErrorMessage","result","currentValidation_1","then","_notifyAfterValidate","onNotifyValidationResult","textField","scrollHeight","globalClassNames","unresizable","active","getLabelStyles","fontSize","marginRight","paddingLeft","lineHeight","TextField","effects","getGlobalClassNames","fieldPrefixSuffix","background","disabledBackground","disabledText","inputPlaceholderText","alignItems","whiteSpace","flexShrink","placeholderStyles","opacity","disabledPlaceholderStyles","normalize","borderBottom","inputBorder","borderBottomColor","inputBorderHovered","getInputFocusStyle","inputFocusBorderAlt","borderRadius","roundedCorner2","inputBackground","cursor","flexDirection","minHeight","flex","textAlign","inputText","textOverflow","outline","getPlaceholderStyles","resize","flexGrow","paddingTop","overflow","_k","_l","pointerEvents","IconFontSizes","bodySubtext","xSmall","AnimationClassNames","small","getFocusStyle","inset","link","_m","Text","createComponent","rest","Slots","getSlots","withSlots","htmlElementProperties","displayName","as","block","nowrap","variant","variantObject","mozOsxFontSmoothing","MozOsxFontSmoothing","webkitFontSmoothing","WebkitFontSmoothing","ToggleBase","forwardedRef","controlledChecked","defaultChecked","inlineLabel","offAriaLabel","offText","onAriaLabel","onChanged","onToggleClick","onText","controlledValue","defaultUncontrolledValue","setValue","isControlled","useConst","currentValue","valueRef","onChangeRef","setValueOrCallOnChange","update","newValue","useControllableValue","isChecked","checked","setChecked","onOffMissing","badAriaLabel","useId","labelId","stateTextId","stateText","toggleNativeProps","labelledById","toggleButton","useFocusRects","useComponentRef","slotProps","hidden","container","pill","thumb","text","toggleButtonRef","componentRef","Toggle","pillUncheckedBackground","bodyBackground","pillCheckedBackground","inputBackgroundChecked","pillCheckedHoveredBackground","inputBackgroundCheckedHovered","thumbUncheckedHoveredBackground","neutralDark","pillCheckedDisabledBackground","disabledBodySubtext","thumbBackground","smallInputBorder","thumbCheckedBackground","inputForegroundChecked","thumbDisabledBackground","thumbCheckedDisabledBackground","pillBorderColor","pillBorderHoveredColor","pillBorderDisabledColor","textDisabledColor","marginBottom","order","marginLeft","wordBreak","DEFAULT_PILL_HEIGHT","transition","justifyContent","borderWidth","DEFAULT_THUMB_SIZE","borderStyle","userSelect"],"sourceRoot":""}