{"version":3,"file":"static/js/588.9d4bd084.chunk.js","mappings":"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","sources":["components/Pages/PasswordGen.tsx"],"sourcesContent":["import React, { CSSProperties, useState } from 'react';\r\nimport * as Fluent from '@fluentui/react';\r\nimport * as Hooks from '@fluentui/react-hooks';\r\nimport * as styles from '../../App.styles';\r\n\r\nconst CharClasses = {\r\n\t\"a\": { UL: \"Aa\", N: \"4\", S: \"@^\" },\r\n\t\"b\": { UL: \"Bb\", N: \"38\", S: \"&>})\" },\r\n\t\"c\": { UL: \"Cc\", N: \"\", S: \"{[<(\" },\r\n\t\"d\": { UL: \"Dd\", N: \"\", S: \">})\" },\r\n\t\"e\": { UL: \"Ee\", N: \"3\", S: \"\" },\r\n\t\"f\": { UL: \"Ff\", N: \"\", S: \"%\" },\r\n\t\"g\": { UL: \"Gg\", N: \"69\", S: \"&%\" },\r\n\t\"h\": { UL: \"Hh\", N: \"\", S: \"#\" },\r\n\t\"i\": { UL: \"Ii\", N: \"1\", S: \"!\" },\r\n\t\"k\": { UL: \"Kk\", N: \"\", S: \"\" },\r\n\t\"l\": { UL: \"Ll\", N: \"1\", S: \"|/\\\\\" },\r\n\t\"m\": { UL: \"Mm\", N: \"\", S: \"\" },\r\n\t\"n\": { UL: \"Nn\", N: \"\", S: \"^\" },\r\n\t\"o\": { UL: \"Oo\", N: \"0\", S: \"*\" },\r\n\t\"p\": { UL: \"Pp\", N: \"\", S: \"\" },\r\n\t\"q\": { UL: \"Qq\", N: \"\", S: \"?\" },\r\n\t\"r\": { UL: \"Rr\", N: \"\", S: \"\" },\r\n\t\"s\": { UL: \"Ss\", N: \"5\", S: \"$\" },\r\n\t\"t\": { UL: \"Tt\", N: \"7\", S: \"+\" },\r\n\t\"u\": { UL: \"Uu\", N: \"\", S: \"\" },\r\n\t\"v\": { UL: \"Vv\", N: \"\", S: \"\" },\r\n\t\"w\": { UL: \"Ww\", N: \"\", S: \"\" },\r\n\t\"x\": { UL: \"Xx\", N: \"\", S: \"*\" },\r\n\t\"y\": { UL: \"Yy\", N: \"\", S: \"\" },\r\n\t\"z\": { UL: \"Zz\", N: \"2\", S: \"\" },\r\n\t\" \": { UL: \"\", N: \"\", S: \"_~-=:;\" },\r\n\t\".\": { UL: \"\", N: \"\", S: \".,'/\\\\\\\"*`:;\" }\r\n} as { [key: string]: any };\r\n\r\nconst generatedPasswordStyle: CSSProperties = {\r\n\tbackgroundColor: styles.appTheme.palette.themeDark,\r\n\tfontSize: '40px',\r\n\tpadding: '10px',\r\n\tborderRadius: '5px'\r\n};\r\nconst resultStyle: CSSProperties = {\r\n\ttextAlign: 'center',\r\n\tmargin: '50px auto 25px'\r\n};\r\n\r\nexport const PasswordGen:React.FunctionComponent = () => {\r\n\tconst tglUcaseLcase = Hooks.useId('tglUcaseLcase');\r\n\tconst tglNumbers = Hooks.useId('tglNumbers');\r\n\tconst tglNoModifyUcase = Hooks.useId('tglNoModifyUcase');\r\n\tconst tglSpecialChars = Hooks.useId('tglSpecialChars');\r\n\tconst txtDesiredPhrase = Hooks.useId('txtDesiredPhrase');\r\n\tconst lblResult = Hooks.useId('lblResult');\r\n\tconst [password, setPassword] = useState(\"-none-\");\r\n\r\n\tconst [UppercaseLowercase, { toggle: toggleUppercaseLowercase }] = Hooks.useBoolean(true);\r\n\tconst [Numbers, { toggle: toggleNumbers }] = Hooks.useBoolean(true);\r\n\tconst [NoModifyUppercase, { toggle: toggleNoModifyUppercase }] = Hooks.useBoolean(true);\r\n\tconst [SpecialCharacters, { toggle: toggleSpecialCharacters }] = Hooks.useBoolean(true);\r\n\tconst [DesiredPhrase, setDesiredPhrase] = React.useState<string>(\"\");\r\n\t\r\n\r\n\tconst generatePassword = () => {\r\n\t\tconst PreferredPasswordLowerCase = DesiredPhrase.toLowerCase().split('');\r\n\t\tlet PreferredPasswordNormal = DesiredPhrase.split('');\r\n\t\tconst isUpperCase = (input:string):boolean => {\r\n\t\t\treturn (input === input.toUpperCase());\r\n\t\t};\r\n\r\n\t\tfor (let i = 0; i < PreferredPasswordNormal.length; i++) {\r\n\t\t\tconst eNormal = PreferredPasswordNormal[i];\r\n\t\t\tconst eLcase = PreferredPasswordLowerCase[i];\r\n\t\t\t\r\n\t\t\tif (CharClasses[eLcase] && (!NoModifyUppercase || (NoModifyUppercase && !isUpperCase(eNormal)))) {\r\n\t\t\t\tvar ULClass = (NoModifyUppercase && CharClasses[eLcase].UL.length == 2 ? CharClasses[eLcase].UL[1] : CharClasses[eLcase].UL);\r\n\t\t\t\tvar NumClass = (Numbers ? CharClasses[eLcase].N : '');\r\n\t\t\t\tvar SymClass = (SpecialCharacters ? CharClasses[eLcase].S : '');\r\n\t\t\t\tvar cClass = ULClass + NumClass + SymClass;\r\n\t\t\t\tvar rnd = Math.floor(Math.random() * cClass.length);\r\n\t\t\t\tPreferredPasswordNormal[i] = cClass[rnd];\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\tsetPassword(PreferredPasswordNormal.join(''));\r\n\t};\r\n\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t<h1>Password Generator</h1>\r\n\t\t\t<h2>Instructions</h2>\r\n\t\t\t<p>\r\n\t\t\t\tEasy-to-remember password. Type your desired password phrase, or leave it blank and click <Fluent.PrimaryButton primary onClick={ev => generatePassword()}>Generate</Fluent.PrimaryButton> button.\r\n\t\t\t</p>\r\n\t\t\t<h2>Options</h2>\r\n\t\t\t<Fluent.Toggle id={tglUcaseLcase} label=\"Uppercase and lowercase\" defaultChecked disabled inlineLabel onText=\"On\" offText=\"Off\" onChange={toggleUppercaseLowercase} />\r\n\t\t\t<Fluent.Toggle id={tglNumbers} label=\"Numbers\" defaultChecked inlineLabel onText=\"On\" offText=\"Off\" onChange={toggleNumbers} />\r\n\t\t\t<Fluent.Toggle id={tglNoModifyUcase} label=\"Don't modify the uppercase\" defaultChecked inlineLabel onText=\"On\" offText=\"Off\" onChange={toggleNoModifyUppercase} />\r\n\t\t\t<Fluent.Toggle id={tglSpecialChars} label=\"Special characters\" defaultChecked inlineLabel onText=\"On\" offText=\"Off\" onChange={toggleSpecialCharacters} />\r\n\t\t\t<Fluent.TextField id={txtDesiredPhrase} label='Desired Phrase' onChange={(ev,newtext) => {\r\n\t\t\t\tif (newtext !== undefined) {\r\n\t\t\t\t\tsetDesiredPhrase(newtext);\r\n\t\t\t\t\tgeneratePassword();\r\n\t\t\t\t}\r\n\t\t\t} } />\r\n\t\t\t<p style={resultStyle}>\r\n\t\t\t\t<Fluent.Text id={lblResult} style={generatedPasswordStyle}>{password}</Fluent.Text>\r\n\t\t\t</p>\r\n\t\t\t\r\n\t\t</React.Fragment>\r\n\t);\r\n};\r\nexport default PasswordGen;"],"names":["CharClasses","UL","N","S","generatedPasswordStyle","backgroundColor","styles","fontSize","padding","borderRadius","resultStyle","textAlign","margin","PasswordGen","tglUcaseLcase","Hooks","tglNumbers","tglNoModifyUcase","tglSpecialChars","txtDesiredPhrase","lblResult","useState","password","setPassword","toggleUppercaseLowercase","toggle","Numbers","toggleNumbers","NoModifyUppercase","toggleNoModifyUppercase","SpecialCharacters","toggleSpecialCharacters","React","DesiredPhrase","setDesiredPhrase","generatePassword","input","PreferredPasswordLowerCase","toLowerCase","split","PreferredPasswordNormal","i","length","eNormal","eLcase","toUpperCase","cClass","rnd","Math","floor","random","join","primary","onClick","ev","id","label","defaultChecked","disabled","inlineLabel","onText","offText","onChange","newtext","undefined","style"],"sourceRoot":""}